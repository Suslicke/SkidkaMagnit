import json
import time

from confing import token, user_id
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.markdown import hbold, hunderline, hcode


bot = Bot(token=token)
dp = Dispatcher(bot)


@dp.message_handler(commands='start')
async def start(message: types.Message):
    start_button = ['–í—Å–µ —Å–∫–∏–¥–∫–∏', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_button)
    await message.answer('–°–∫–∏–¥–∫–∏ –º–∞–≥–Ω–∏—Ç', reply_markup=keyboard)


@dp.message_handler(text='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏')
async def category(message: types.Message):
    category_button = ['–§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏', '–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è',
                       '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ', '–ù–∞–ø–∏—Ç–∫–∏',
                       '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã', '–ë–∞–∫–∞–ª–µ—è',
                       '–•–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞', '–ú—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞',
                       '–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã', '–°–Ω–µ–∫–∏',
                       '–ì–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞', '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è',
                       '–î–µ—Ç—è–º', '–î–æ–º, —Å–∞–¥, –≥–∞—Ä–∞–∂',
                       '–ê–ø—Ç–µ—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã', '–ê–ª–∫–æ–≥–æ–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è',
                       '–ù–∞–∑–∞–¥']

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*category_button)

    await message.answer('–°–∫–∏–¥–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', reply_markup=keyboard)


@dp.message_handler(text='–ù–∞–∑–∞–¥')
async def back(message: types.Message):
    start_button = ['–í—Å–µ —Å–∫–∏–¥–∫–∏', '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_button)
    await message.answer('–°–∫–∏–¥–∫–∏ –º–∞–≥–Ω–∏—Ç', reply_markup=keyboard)


@dp.message_handler()
async def bot_message(message: types.Message):
    value = message.text
    if value == '–§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏':
        value = 'fruits_vegetables'
    if value == '–ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∏–µ –∏–∑–¥–µ–ª–∏—è':
        value = 'konditerskye'
    if value == '–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ':
        value = 'krasota'
    if value == '–ù–∞–ø–∏—Ç–∫–∏':
        value = 'napitki'
    if value == '–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã':
        value = 'molochnie_produkty'
    if value == '–ë–∞–∫–∞–ª–µ—è':
        value = 'bakaleya'
    if value == '–•–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞':
        value = 'hleb'
    if value == '–ú—è—Å–æ, —Ä—ã–±–∞, —è–π—Ü–∞':
        value = 'myaso_ryba'
    if value == '–ü–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã':
        value = 'polufabkitaty'
    if value == '–°–Ω–µ–∫–∏':
        value = 'sneki'
    if value == '–ì–æ—Ç–æ–≤—ã–µ –±–ª—é–¥–∞':
        value = 'gotovye'
    if value == '–ë—ã—Ç–æ–≤–∞—è —Ö–∏–º–∏—è':
        value = 'byt_chim'
    if value == '–î–µ—Ç—è–º':
        value = 'detyam'
    if value == '–î–æ–º, —Å–∞–¥, –≥–∞—Ä–∞–∂':
        value = 'dom_sad'
    if value == '–ê–ø—Ç–µ—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã':
        value = 'apteka'
    if value == '–ê–ª–∫–æ–≥–æ–ª—å–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è':
        value = 'alk'
    try:
        with open(f'data/{value}_products_data_list.json', encoding='utf-8') as file:
            value = json.load(file)
            num = 0
            for x in range(0, len(value)):
                action = f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {value[num]['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']}\n" \
                         f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {value[num]['–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞']} –†—É–±\n" \
                         f"üî•Ô∏è–ù–æ–≤–∞—è –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {value[num]['–ù–æ–≤–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞']} –†—É–±üî•Ô∏è\n" \
                         f"‚ùóÔ∏è–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏: {value[num]['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏'] + ' %‚ùóÔ∏è'}\n" \
                         f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–∏:" \
                         f" {value[num]['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–∏']['–ù–∞—á–∞–ª–æ –∞–∫—Ü–∏–∏']}" \
                         f" {value[num]['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–∏']['–ö–æ–Ω–µ—Ü –∞–∫—Ü–∏–∏']}"
                await message.answer(action)
                num += 1
    except FileNotFoundError:
        message_error = '–ù–µ—Ç —Å–∫–∏–¥–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
        await bot.send_message(message.from_user.id, message_error)


@dp.message_handler(text='–í—Å–µ —Å–∫–∏–¥–∫–∏')
async def all_action(message: types.Message):
    for item in ['fruits_vegetables', 'konditerskye',
                 'krasota', 'napitki', 'molochnie_produkty',
                 'bakaleya', 'hleb', 'myaso_ryba',
                 'myaso_ryba', 'fruits_vegetables', 'sneki',
                 'gotovye', 'byt_chim', 'detyam',
                 'dom_sad', 'apteka', 'alk']:
        str(item)
        with open(f'data/{item}_products_data_list.json', encoding='utf-8') as file:
            item = json.load(file)
        num = 0
        for x in range(0, len(item)):
            action = f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {value[num]['–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']}\n" \
                     f"–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {value[num]['–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞']} –†—É–±\n" \
                     f"üî•Ô∏è–ù–æ–≤–∞—è –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {value[num]['–ù–æ–≤–∞—è —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞']} –†—É–±üî•Ô∏è\n" \
                     f"‚ùóÔ∏è–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏: {value[num]['–ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏'] + ' %‚ùóÔ∏è'}\n" \
                     f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–∏:" \
                     f" {value[num]['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–∏']['–ù–∞—á–∞–ª–æ –∞–∫—Ü–∏–∏']}" \
                     f" {value[num]['–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–∏']['–ö–æ–Ω–µ—Ü –∞–∫—Ü–∏–∏']}"
            await message.answer(action)
            num += 1
        time.sleep(10)

if __name__ == '__main__':
    executor.start_polling(dp)